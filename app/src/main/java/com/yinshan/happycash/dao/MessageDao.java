package com.yinshan.happycash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, Integer.class, "messageId", false, "MESSAGE_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property ThreadId = new Property(3, Integer.class, "threadId", false, "THREAD_ID");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Date_sent = new Property(6, String.class, "date_sent", false, "DATE_SENT");
        public final static Property Subject = new Property(7, String.class, "subject", false, "SUBJECT");
        public final static Property Body = new Property(8, String.class, "body", false, "BODY");
        public final static Property State = new Property(9, Integer.class, "state", false, "STATE");
        public final static Property Flag = new Property(10, Integer.class, "flag", false, "FLAG");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" INTEGER," + // 1: messageId
                "\"TYPE\" INTEGER," + // 2: type
                "\"THREAD_ID\" INTEGER," + // 3: threadId
                "\"ADDRESS\" TEXT," + // 4: address
                "\"DATE\" TEXT," + // 5: date
                "\"DATE_SENT\" TEXT," + // 6: date_sent
                "\"SUBJECT\" TEXT," + // 7: subject
                "\"BODY\" TEXT," + // 8: body
                "\"STATE\" INTEGER," + // 9: state
                "\"FLAG\" INTEGER);"); // 10: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(2, messageId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(4, threadId);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String date_sent = entity.getDate_sent();
        if (date_sent != null) {
            stmt.bindString(7, date_sent);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(8, subject);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(9, body);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(10, state);
        }
 
        Integer flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(11, flag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(2, messageId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(4, threadId);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String date_sent = entity.getDate_sent();
        if (date_sent != null) {
            stmt.bindString(7, date_sent);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(8, subject);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(9, body);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(10, state);
        }
 
        Integer flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(11, flag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // threadId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date_sent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // subject
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // body
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // state
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setThreadId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate_sent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubject(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBody(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFlag(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
